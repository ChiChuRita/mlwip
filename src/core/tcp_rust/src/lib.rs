// TCP Rust Implementation Library
// Main library entry point for lwip_tcp_rust

// TCP protocol definitions (pure Rust implementation)
pub mod tcp_proto;

// Include FFI bindings generated by build.rs
#[cfg(not(test))]
#[allow(non_upper_case_globals)]
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
#[allow(dead_code)]
pub(crate) mod ffi {
    include!(concat!(env!("OUT_DIR"), "/bindings.rs"));
}

// For tests, we need to provide mock FFI types and functions
#[cfg(test)]
#[allow(non_upper_case_globals)]
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
#[allow(dead_code)]
pub(crate) mod ffi {
    // Mock FFI types for testing
    pub type ip_addr_t = [u8; 20];
    pub type netif = u8;

    // Re-export our Rust TCP header as the FFI type for tests
    pub use crate::tcp_proto::TcpHdr as tcp_hdr;

    #[repr(C)]
    pub struct pbuf {
        pub next: *mut pbuf,
        pub payload: *mut core::ffi::c_void,
        pub tot_len: u16,
        pub len: u16,
        pub type_: u8,
        pub flags: u8,
        pub ref_: u8,
    }

    // TCP flags - re-export from tcp_proto
    pub use crate::tcp_proto::{TCP_FIN, TCP_SYN, TCP_RST, TCP_PSH, TCP_ACK, TCP_URG};

    // Mock pbuf layer and type constants
    pub const pbuf_layer_PBUF_TRANSPORT: u32 = 0;
    pub const pbuf_type_PBUF_RAM: u32 = 0;

    // Mock functions - these will panic if called in tests
    pub unsafe fn pbuf_alloc(_layer: u32, _length: u16, _type: u32) -> *mut pbuf {
        panic!("pbuf_alloc should not be called in tests");
    }

    pub unsafe fn pbuf_free(_p: *mut pbuf) {
        // No-op for tests
    }
}

pub mod state;
pub mod control_path;
pub mod tcp_in;
pub mod tcp_out;

// Re-export commonly used types
pub use state::{TcpState, TcpConnectionState};
pub use control_path::{TcpFlags, TcpSegment, ControlPath};
